using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations.Design;
using Microsoft.EntityFrameworkCore.Migrations.Operations;

namespace EFCore.Repro.Library.Design
{
    public class AutoGeneratedCSharpMigrationsGenerator : CSharpMigrationsGenerator
    {
        public AutoGeneratedCSharpMigrationsGenerator(MigrationsCodeGeneratorDependencies dependencies,
            CSharpMigrationsGeneratorDependencies csharpDependencies)
            : base(dependencies, csharpDependencies)
        {
        }

        private string WarningDisablers =>
            $"#pragma warning disable CS1591{Environment.NewLine}" +
            $"// ReSharper disable RedundantArgumentDefaultValue{Environment.NewLine}" +
            $"// ReSharper disable PartialTypeWithSinglePart{Environment.NewLine}" +
            $"// ReSharper disable RedundantUsingDirective";

        public override string GenerateMigration
        (
            string migrationNamespace,
            string migrationName,
            IReadOnlyList<MigrationOperation> upOperations,
            IReadOnlyList<MigrationOperation> downOperations
        )
        {
            var originalMigration = base.GenerateMigration
            (
                migrationNamespace,
                migrationName,
                upOperations,
                downOperations
            ).Split(new[] { Environment.NewLine }, StringSplitOptions.None).ToList();

            var builder = new IndentedStringBuilder();

            builder.AppendLine(@"// <auto-generated />");
            builder.AppendLine();
            builder.AppendLine(this.WarningDisablers);
            builder.AppendLine();

            var firstUsing = originalMigration.First(s => s.Contains("using"));
            var usingIndent = new string(firstUsing.TakeWhile(c => c == ' ' || c == '\t').ToArray());
            var usingInsertionIndex = originalMigration.IndexOf(firstUsing);

            originalMigration.Insert(usingInsertionIndex, $"{usingIndent}using System.Diagnostics.CodeAnalysis;");

            var classDeclaration = originalMigration.First(s => s.Contains("partial class"));
            var attributeInsertionIndex = originalMigration.IndexOf(classDeclaration);
            var classIndent = new string(classDeclaration.TakeWhile(c => c == ' ' || c == '\t').ToArray());

            originalMigration.Insert(attributeInsertionIndex, $"{classIndent}[ExcludeFromCodeCoverage]");

            foreach (var line in originalMigration)
            {
                builder.AppendLine(line);
            }

            return builder.ToString();
        }

        public override string GenerateMetadata
        (
            string migrationNamespace,
            Type contextType,
            string migrationName,
            string migrationId,
            IModel targetModel
        )
        {
            var originalMigration = base.GenerateMetadata
            (
                migrationNamespace,
                contextType,
                migrationName,
                migrationId,
                targetModel
            ).Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).ToList();

            var builder = new IndentedStringBuilder();

            builder.AppendLine(@"// <auto-generated />");
            builder.AppendLine(this.WarningDisablers);
            builder.AppendLine();

            foreach (var line in originalMigration)
            {
                builder.AppendLine(line);
            }

            return builder.ToString();
        }

        public override string GenerateSnapshot
        (
            string modelSnapshotNamespace,
            Type contextType,
            string modelSnapshotName,
            IModel model
        )
        {
            var originalSnapshot = base.GenerateSnapshot
            (
                modelSnapshotNamespace,
                contextType,
                modelSnapshotName,
                model
            ).Split(new[] { Environment.NewLine }, StringSplitOptions.None).ToList();

            var builder = new IndentedStringBuilder();

            builder.AppendLine(@"// <auto-generated />");
            builder.AppendLine();
            builder.AppendLine(this.WarningDisablers);
            builder.AppendLine();

            var firstUsing = originalSnapshot.First(s => s.Contains("using"));
            var usingIndent = new string(firstUsing.TakeWhile(c => c == ' ' || c == '\t').ToArray());
            var usingInsertionIndex = originalSnapshot.IndexOf(firstUsing);

            originalSnapshot.Insert(usingInsertionIndex, $"{usingIndent}using System.Diagnostics.CodeAnalysis;");

            var classDeclaration = originalSnapshot.First(s => s.Contains("partial class"));
            var attributeInsertionIndex = originalSnapshot.IndexOf(classDeclaration);
            var classIndent = new string(classDeclaration.TakeWhile(c => c == ' ' || c == '\t').ToArray());

            originalSnapshot.Insert(attributeInsertionIndex, $"{classIndent}[ExcludeFromCodeCoverage]");

            foreach (var line in originalSnapshot)
            {
                builder.AppendLine(line);
            }

            return builder.ToString();
        }
    }
}
